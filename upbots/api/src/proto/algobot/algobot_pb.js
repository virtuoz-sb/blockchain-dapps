// source: algobot.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.algobot.DeleteSubscriptionRequest', null, global);
goog.exportSymbol('proto.algobot.DeleteSubscriptionResponse', null, global);
goog.exportSymbol('proto.algobot.FollowBotRequest', null, global);
goog.exportSymbol('proto.algobot.FollowBotResponse', null, global);
goog.exportSymbol('proto.algobot.PauseActionType', null, global);
goog.exportSymbol('proto.algobot.UserBotSubscriptionPauseRequest', null, global);
goog.exportSymbol('proto.algobot.UserBotSubscriptionPauseResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.algobot.FollowBotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.algobot.FollowBotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.algobot.FollowBotRequest.displayName = 'proto.algobot.FollowBotRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.algobot.FollowBotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.algobot.FollowBotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.algobot.FollowBotResponse.displayName = 'proto.algobot.FollowBotResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.algobot.UserBotSubscriptionPauseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.algobot.UserBotSubscriptionPauseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.algobot.UserBotSubscriptionPauseRequest.displayName = 'proto.algobot.UserBotSubscriptionPauseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.algobot.UserBotSubscriptionPauseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.algobot.UserBotSubscriptionPauseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.algobot.UserBotSubscriptionPauseResponse.displayName = 'proto.algobot.UserBotSubscriptionPauseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.algobot.DeleteSubscriptionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.algobot.DeleteSubscriptionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.algobot.DeleteSubscriptionRequest.displayName = 'proto.algobot.DeleteSubscriptionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.algobot.DeleteSubscriptionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.algobot.DeleteSubscriptionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.algobot.DeleteSubscriptionResponse.displayName = 'proto.algobot.DeleteSubscriptionResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.algobot.FollowBotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.algobot.FollowBotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.algobot.FollowBotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.FollowBotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apikeyid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    strattype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    accounttype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    accountpercentage: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    accountleverage: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    contractsize: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    baseamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    positiontype: jspb.Message.getFieldWithDefault(msg, 10, ""),
    positionamount: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    quote: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.algobot.FollowBotRequest}
 */
proto.algobot.FollowBotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.algobot.FollowBotRequest;
  return proto.algobot.FollowBotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.algobot.FollowBotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.algobot.FollowBotRequest}
 */
proto.algobot.FollowBotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApikeyid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrattype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccounttype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccountpercentage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccountleverage(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setContractsize(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBaseamount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPositiontype(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPositionamount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuote(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.algobot.FollowBotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.algobot.FollowBotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.algobot.FollowBotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.FollowBotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApikeyid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStrattype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAccounttype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAccountpercentage();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getAccountleverage();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getContractsize();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getBaseamount();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getPositiontype();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getPositionamount();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getQuote();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * optional string botID = 1;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setBotid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string apiKeyID = 3;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getApikeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setApikeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string stratType = 4;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getStrattype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setStrattype = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string accountType = 5;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getAccounttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setAccounttype = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double accountPercentage = 6;
 * @return {number}
 */
proto.algobot.FollowBotRequest.prototype.getAccountpercentage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setAccountpercentage = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double accountLeverage = 7;
 * @return {number}
 */
proto.algobot.FollowBotRequest.prototype.getAccountleverage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setAccountleverage = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double contractSize = 8;
 * @return {number}
 */
proto.algobot.FollowBotRequest.prototype.getContractsize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setContractsize = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double baseAmount = 9;
 * @return {number}
 */
proto.algobot.FollowBotRequest.prototype.getBaseamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setBaseamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string positionType = 10;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getPositiontype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setPositiontype = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional double positionAmount = 11;
 * @return {number}
 */
proto.algobot.FollowBotRequest.prototype.getPositionamount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setPositionamount = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional string quote = 12;
 * @return {string}
 */
proto.algobot.FollowBotRequest.prototype.getQuote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotRequest} returns this
 */
proto.algobot.FollowBotRequest.prototype.setQuote = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.algobot.FollowBotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.algobot.FollowBotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.algobot.FollowBotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.FollowBotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    botid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    subscriptionid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.algobot.FollowBotResponse}
 */
proto.algobot.FollowBotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.algobot.FollowBotResponse;
  return proto.algobot.FollowBotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.algobot.FollowBotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.algobot.FollowBotResponse}
 */
proto.algobot.FollowBotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBotid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubscriptionid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.algobot.FollowBotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.algobot.FollowBotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.algobot.FollowBotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.FollowBotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSubscriptionid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string botID = 1;
 * @return {string}
 */
proto.algobot.FollowBotResponse.prototype.getBotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotResponse} returns this
 */
proto.algobot.FollowBotResponse.prototype.setBotid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string subscriptionId = 2;
 * @return {string}
 */
proto.algobot.FollowBotResponse.prototype.getSubscriptionid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.FollowBotResponse} returns this
 */
proto.algobot.FollowBotResponse.prototype.setSubscriptionid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.algobot.UserBotSubscriptionPauseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.algobot.UserBotSubscriptionPauseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.algobot.UserBotSubscriptionPauseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.UserBotSubscriptionPauseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.algobot.UserBotSubscriptionPauseRequest}
 */
proto.algobot.UserBotSubscriptionPauseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.algobot.UserBotSubscriptionPauseRequest;
  return proto.algobot.UserBotSubscriptionPauseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.algobot.UserBotSubscriptionPauseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.algobot.UserBotSubscriptionPauseRequest}
 */
proto.algobot.UserBotSubscriptionPauseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubid(value);
      break;
    case 2:
      var value = /** @type {!proto.algobot.PauseActionType} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.algobot.UserBotSubscriptionPauseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.algobot.UserBotSubscriptionPauseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.algobot.UserBotSubscriptionPauseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.UserBotSubscriptionPauseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string subId = 1;
 * @return {string}
 */
proto.algobot.UserBotSubscriptionPauseRequest.prototype.getSubid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.UserBotSubscriptionPauseRequest} returns this
 */
proto.algobot.UserBotSubscriptionPauseRequest.prototype.setSubid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PauseActionType action = 2;
 * @return {!proto.algobot.PauseActionType}
 */
proto.algobot.UserBotSubscriptionPauseRequest.prototype.getAction = function() {
  return /** @type {!proto.algobot.PauseActionType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.algobot.PauseActionType} value
 * @return {!proto.algobot.UserBotSubscriptionPauseRequest} returns this
 */
proto.algobot.UserBotSubscriptionPauseRequest.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.algobot.UserBotSubscriptionPauseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.algobot.UserBotSubscriptionPauseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.algobot.UserBotSubscriptionPauseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.UserBotSubscriptionPauseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    subid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.algobot.UserBotSubscriptionPauseResponse}
 */
proto.algobot.UserBotSubscriptionPauseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.algobot.UserBotSubscriptionPauseResponse;
  return proto.algobot.UserBotSubscriptionPauseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.algobot.UserBotSubscriptionPauseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.algobot.UserBotSubscriptionPauseResponse}
 */
proto.algobot.UserBotSubscriptionPauseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.algobot.UserBotSubscriptionPauseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.algobot.UserBotSubscriptionPauseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.algobot.UserBotSubscriptionPauseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.UserBotSubscriptionPauseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string subId = 1;
 * @return {string}
 */
proto.algobot.UserBotSubscriptionPauseResponse.prototype.getSubid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.UserBotSubscriptionPauseResponse} returns this
 */
proto.algobot.UserBotSubscriptionPauseResponse.prototype.setSubid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.algobot.UserBotSubscriptionPauseResponse.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.algobot.UserBotSubscriptionPauseResponse} returns this
 */
proto.algobot.UserBotSubscriptionPauseResponse.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.algobot.DeleteSubscriptionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.algobot.DeleteSubscriptionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.algobot.DeleteSubscriptionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.DeleteSubscriptionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    subid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.algobot.DeleteSubscriptionRequest}
 */
proto.algobot.DeleteSubscriptionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.algobot.DeleteSubscriptionRequest;
  return proto.algobot.DeleteSubscriptionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.algobot.DeleteSubscriptionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.algobot.DeleteSubscriptionRequest}
 */
proto.algobot.DeleteSubscriptionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.algobot.DeleteSubscriptionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.algobot.DeleteSubscriptionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.algobot.DeleteSubscriptionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.DeleteSubscriptionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSubid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string subId = 1;
 * @return {string}
 */
proto.algobot.DeleteSubscriptionRequest.prototype.getSubid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.DeleteSubscriptionRequest} returns this
 */
proto.algobot.DeleteSubscriptionRequest.prototype.setSubid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.algobot.DeleteSubscriptionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.algobot.DeleteSubscriptionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.algobot.DeleteSubscriptionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.DeleteSubscriptionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    ack: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.algobot.DeleteSubscriptionResponse}
 */
proto.algobot.DeleteSubscriptionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.algobot.DeleteSubscriptionResponse;
  return proto.algobot.DeleteSubscriptionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.algobot.DeleteSubscriptionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.algobot.DeleteSubscriptionResponse}
 */
proto.algobot.DeleteSubscriptionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAck(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.algobot.DeleteSubscriptionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.algobot.DeleteSubscriptionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.algobot.DeleteSubscriptionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.algobot.DeleteSubscriptionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAck();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string ack = 1;
 * @return {string}
 */
proto.algobot.DeleteSubscriptionResponse.prototype.getAck = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.algobot.DeleteSubscriptionResponse} returns this
 */
proto.algobot.DeleteSubscriptionResponse.prototype.setAck = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.algobot.PauseActionType = {
  NOT_ACTION_TYPE_SET: 0,
  PAUSE: 1,
  RESUME: 2
};

goog.object.extend(exports, proto.algobot);
